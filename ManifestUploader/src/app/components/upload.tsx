'use client';
import { IPFSObject, uploadObjectToIPFS } from '@/serverActions/ipfs';
import { Button } from '@nextui-org/button';
import { useState, useEffect } from 'react';
import { FileRejection, useDropzone } from 'react-dropzone';
import { AiOutlineCloudUpload } from 'react-icons/ai';

export function UploadComponent() {
	const [acceptedList, setAcceptedList] = useState<File[]>([]);
	const [rejectedList, setRejectedList] = useState<FileRejection[]>([]);
	const [uploadedOBJs, setUploadedOBJs] = useState<IPFSObject[]>([]);
	const {
		acceptedFiles,
		fileRejections,
		getRootProps,
		getInputProps,
		isDragActive
	} = useDropzone({
		accept: {
			'application/json': ['.json']
		},
		maxFiles: 5
	});

	useEffect(() => {
		let tmpNameDict: Map<string, boolean> = new Map();
		// Load already accepted files
		acceptedList.forEach((file) => {
			tmpNameDict.set(file.name, true);
		});

		// Try to add new files
		const newFiles = acceptedFiles
			.map((file) => {
				if (tmpNameDict.has(file.name)) {
					alert('File with name ' + file.name + ' already added');
					return null;
				}
				tmpNameDict.set(file.name, true);
				return file;
			})
			.filter((file) => file !== null) as File[];
		setAcceptedList([...acceptedList, ...newFiles]);
	}, [acceptedFiles]);

	useEffect(() => {
		let tmpNameDict: Map<string, boolean> = new Map();
		// Load already accepted files
		rejectedList.forEach((file) => {
			tmpNameDict.set(file.file.name, true);
		});

		// Try to add new files
		const newFiles = fileRejections
			.map((file) => {
				if (tmpNameDict.has(file.file.name)) {
					alert(
						'File with name ' + file.file.name + ' already added'
					);
					return null;
				}
				tmpNameDict.set(file.file.name, true);
				return file;
			})
			.filter((file) => file !== null) as FileRejection[];
		setRejectedList([...rejectedList, ...newFiles]);
	}, [fileRejections]);

	function onSubmit() {
		acceptedList.forEach(async (file) => {
			// Log to console file content
			file.text().then(async (text) => {
				let obj: IPFSObject = {
					name: file.name,
					content: JSON.parse(text),
					uri: undefined
				};
				obj = await uploadObjectToIPFS(obj);
				setUploadedOBJs([...uploadedOBJs, obj]);
			});
		});
		setAcceptedList([]);
		setRejectedList([]);
	}

	return (
		<div>
			<div
				{...getRootProps({
					className: 'flex items-center justify-center w-full'
				})}
			>
				<label
					htmlFor="dropzone-file"
					className="flex h-64 w-full cursor-pointer flex-col items-center justify-center rounded-lg border-2 border-dashed"
				>
					<div className="flex flex-col items-center justify-center pb-6 pt-5">
						<AiOutlineCloudUpload className="mb-4 h-8 w-8" />

						{isDragActive ? (
							<p className="mb-2 text-sm">
								Drop file here to upload
							</p>
						) : (
							<>
								<p className="mb-2 text-sm">
									<span className="font-semibold">
										Click to upload
									</span>{' '}
									or drag and drop
								</p>
								<p className="text-xs">
									Only JSON files generated by{' '}
									<span className="font-semibold">
										Teal-Owl Publisher
									</span>{' '}
									are supported. Max 5 files.
								</p>
							</>
						)}
					</div>
					<input {...getInputProps()} />
				</label>
			</div>
			<div className="grid grid-cols-2">
				<div className="mt-5">
					<p className="text-xl">Accepted files:</p>
					<ul className="max-w-md list-inside list-disc space-y-1 ">
						{acceptedList.map((file) => (
							<li key={file.name + file.size + file.type}>
								{' '}
								{file.name}
							</li>
						))}
					</ul>
				</div>
				<div className="mt-5">
					<p className="text-xl">Rejected files:</p>
					<ul className="max-w-md list-inside list-disc space-y-1 ">
						{rejectedList.map((file) => (
							<li
								key={
									file.file.name +
									file.file.size +
									file.file.type
								}
							>
								{' '}
								{file.file.name}:
								<ol className="mt-2 list-inside list-disc space-y-1 pl-5">
									{file.errors.map((error) => (
										<li key={error.code}>
											{error.message}
										</li>
									))}
								</ol>
							</li>
						))}
					</ul>
				</div>
			</div>
			<hr className="my-8 h-px border-0 bg-gray-200 dark:bg-gray-700"></hr>
			<div className="grid grid-cols-3">
				<div className="col-span-2">
					<p className="text-xl">Uploaded files:</p>
					<ul className="max-w-md list-inside list-disc space-y-1 ">
						{uploadedOBJs.map((obj) => (
							<li key={obj.uri}>
								{obj.name} -{' '}
								<a
									href={obj.uri}
									className="italic text-blue-600"
								>
									{obj.uri}
								</a>
							</li>
						))}
					</ul>
				</div>
				<div className="flex flex-col gap-2">
					<Button
						isDisabled={acceptedList.length === 0}
						color="primary"
						onClick={onSubmit}
					>
						Upload
					</Button>
					<Button
						isDisabled={
							acceptedList.length === 0 &&
							rejectedList.length === 0
						}
						color="danger"
						onClick={() => {
							setAcceptedList([]);
							setRejectedList([]);
						}}
					>
						Clear
					</Button>
				</div>
			</div>
		</div>
	);
}
