'use client';

import { Dispatch, SetStateAction, useEffect } from 'react';
import { FileRejection, useDropzone } from 'react-dropzone';
import { AiOutlineCloudUpload } from 'react-icons/ai';

/**
 * This interface is used to define the props of the InputComponent.
 * @param accepted Object containing the list of accepted files and the setter for the list (returned by useState)
 * @param rejected Object containing the list of rejected files and the setter for the list (returned by useState)
 */
interface InputComponentProps {
	accepted: { list: File[]; set: Dispatch<SetStateAction<File[]>> };
	rejected: {
		list: FileRejection[];
		set: Dispatch<SetStateAction<FileRejection[]>>;
	};
}

/**
 * This component is used to upload files to the application.
 * @param props see InputComponentProps
 * @returns
 */
export default function InputComponent(props: InputComponentProps) {
	const {
		acceptedFiles,
		fileRejections,
		getRootProps,
		getInputProps,
		isDragActive
	} = useDropzone({
		accept: {
			'application/json': ['.json']
		},
		maxFiles: 5
	});

	/**
	 * This effect is triggered when a file is accepted.
	 * It checks if the file is already in the accepted list, if it isn't, the file is added to the list.
	 * If the file is already in the list, an alert is shown.
	 * TODO: This should be refactored to use a useMemo hook instead of a useEffect hook. This would allow to lower rerenders needed.
	 */
	useEffect(() => {
		const tmpNameDict: Map<string, boolean> = new Map();
		// Load already accepted files
		props.accepted.list.forEach((file) => {
			tmpNameDict.set(file.name, true);
		});

		// Try to add new files
		const newFiles = acceptedFiles
			.map((file) => {
				if (tmpNameDict.has(file.name)) {
					alert('File with name ' + file.name + ' already added');
					return null;
				}
				tmpNameDict.set(file.name, true);
				return file;
			})
			.filter((file) => file !== null) as File[];
		props.accepted.set([...props.accepted.list, ...newFiles]);
	}, [acceptedFiles]);

	/**
	 * This effect is triggered when a file is rejected.
	 * It checks if the file is already in the rejected list, if it isn't, the file is added to the list.
	 * If the file is already in the list, an alert is shown.
	 * TODO: This should be refactored to use a useMemo hook instead of a useEffect hook. This would allow to lower rerenders needed.
	 */
	useEffect(() => {
		const tmpNameDict: Map<string, boolean> = new Map();
		// Load already accepted files
		props.rejected.list.forEach((file) => {
			tmpNameDict.set(file.file.name, true);
		});

		// Try to add new files
		const newFiles = fileRejections
			.map((file) => {
				if (tmpNameDict.has(file.file.name)) {
					alert(
						'File with name ' + file.file.name + ' already added'
					);
					return null;
				}
				tmpNameDict.set(file.file.name, true);
				return file;
			})
			.filter((file) => file !== null) as FileRejection[];
		props.rejected.set([...props.rejected.list, ...newFiles]);
	}, [fileRejections]);

	return (
		<div
			{...getRootProps({
				className: 'flex items-center justify-center w-full'
			})}
		>
			<label
				htmlFor="dropzone-file"
				className="flex h-60 w-[60rem] cursor-pointer flex-col items-center justify-center rounded-lg border-2 border-dashed"
			>
				<div className="flex flex-col items-center justify-center pb-6 pt-5">
					<AiOutlineCloudUpload className="mb-4 h-8 w-8" />

					{isDragActive ? (
						<p className="mb-2 text-sm">Drop file here to upload</p>
					) : (
						<>
							<p className="mb-2 text-sm">
								<span className="font-semibold">
									Click to upload
								</span>{' '}
								or drag and drop
							</p>
							<p className="text-xs">
								Only JSON files generated by{' '}
								<span className="font-semibold">
									Teal-Owl Publisher
								</span>{' '}
								are supported. Max 5 files.
							</p>
						</>
					)}
				</div>
				<input {...getInputProps()} />
			</label>
		</div>
	);
}
